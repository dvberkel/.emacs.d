#+title: Emacs Configuration
#+author: Daan van Berkel
#+email: daan.v.berkel.1980@gmail.com
#+startup: inlineimages

I started using emacs because their was a discrepancy between the
tools I used at work and at home. At the time I used a Mac at work and
a Linux distribution at home. I used different editors and had to
invest time to get the learn them both. It seemed wasteful. So I set
out to learn an editor that was available on both platform. I
settled for [[http://www.gnu.org/software/emacs/][emacs]].

#+caption: Classical learning curves for some common editors
[[./image/learning_curves.jpg]]

It takes some time to get to know emacs, and it takes a lot of time to
get to know it well. With my growing understanding of emacs, my
preference for structuring my emacs configuration grew as well. Below
is an account of the phases I went through

0. *Unstructured* I used vanilla emacs.
1. *install packages*  but little to no customization.
2. *org-mode* I went straight from no customization to customization
   with [[http://orgmode.org/][org-mode]]. That culminated in [[https://github.com/dvberkel/.emacs.d/blob/ca3b85377c8f07cec2a70ef9012445688bc2c41b/literal-init.org][this configuration]].
3. *org-mode* When I better understood configuration I decided to
   split the different customization topics over [[https://github.com/dvb-industries/.emacs.d/tree/892bad8768311e5034439a045f47b041c10258de][different files]].
4. *org-mode* Disappointed with the disparity I decided to start over
   with and place all the files in a single org-file. This document it
   the current iteration.

* Getting help
One of the reasons I like emacs is that its documentation is available
right from the editor itself. You can learn a lot just by asking
emacs.

One of the most helpfully emacs commands is =C-h ?=. It opens up the
*Metahelp* buffer which lists the different options the =C-h= command has.

* Customization with org-mode
[[http://orgmode.org/][org-mode]] is an emacs mode that considerably changed the way I use
emacs. One of its features is literate programming. Literate
programming is invented by Donald Knuth and is the practice to write
prose as documentation for source code that is intersperced between
the document. In a later step, you tangle document to produce the
actual source code. This helps to keep my emacs customizations
organized.

In order to use it you need to bootstrap it in an =init.el=.
